# The xv6 kernel starts executing in this file. This file is linked with
# the kernel C code, so it can refer to kernel symbols such as main().
# The boot block (bootasm.S and bootmain.c) jumps to entry below.
        
# Multiboot header, for multiboot boot loaders like GNU Grub.
# http://www.gnu.org/software/grub/manual/multiboot/multiboot.html
#
# Using GRUB 2, you can boot xv6 from a file stored in a
# Linux file system by copying kernel or kernelmemfs to /boot
# and then adding this menu entry:
#
# menuentry "xv6" {
# 	insmod ext2
# 	set root='(hd0,msdos1)'
# 	set kernel='/boot/kernel'
# 	echo "Loading ${kernel}..."
# 	multiboot ${kernel} ${kernel}
# 	boot
# }

# Multiboot header.  Data to direct multiboot loader.
.p2align 2
.text
.globl multiboot_header
multiboot_header:
  #define magic 0x1badb002
  #define flags 0
  .long magic
  .long flags
  .long (-magic-flags)


#include "./asm.h"
#include "memlayout.h"
#include "mmu.h"
#include "param.h"

#  本代码运行在未开启分页的保护模式下,线性地址就是物理地址 但是kernel起始地址在0x80000000
#  当使用物理地址的时候需要变换

# Entering xv6 on boot processor, with paging off.
.globl entry
entry:
  # Turn on page size extension for 4Mbyte pages
  movl    %cr4, %eax
  orl     $(CR4_PSE), %eax  # 开启物理地址拓展 pse 可以在页目录表中的一项代表4m的内存 虚拟基址的前10位代表 页目录表的索引 后22位代表4m内存的偏移量
  movl    %eax, %cr4
  # Set page directory
  movl    $(ASM_V2P(entry_page_directory)), %eax  #  开启分页  entry_page_directory定义在main.c  va[0~4m)=>pa[0~4m)  va[0x80000000~0x80000000+4m)=>pa[0~4m)
  movl    %eax, %cr3
  # Turn on paging.
  movl    %cr0, %eax
  orl     $(CR0_PG|CR0_WP), %eax
  movl    %eax, %cr0

  # Set up the stack pointer.
  movl $(bsptmp_stack + KSTACK_SIZE), %esp

  # Jump to main(), and switch to executing at
  # high addresses. The indirect call is needed because
  # the assembler produces a PC-relative instruction
  # for a direct jump.
  mov $main, %eax #  跳转到高地址中执行 main.c
  jmp *%eax

.comm bsptmp_stack, KSTACK_SIZE  #  bsp 使用的内核栈 在内核文件中预留的4k栈
